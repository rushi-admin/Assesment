pipeline {
    agent any

    environment {
        IMAGE_NAME = "rushiadmin/assesment"
        IMAGE_TAG = "latest"
        GIT_REPO = "https://github.com/rushi-admin/Assesment.git"
        KUBECONFIG_PATH = "/home/ec2-user/.kube/config"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_NAME:$IMAGE_TAG -f app/Dockerfile app/'
                }
            }
        }

        stage('Docker Login & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push $IMAGE_NAME:$IMAGE_TAG'
                }
            }
        }

        stage('Deploy to k3d Cluster') {
            steps {
                script {
                    withEnv(["KUBECONFIG=${KUBECONFIG_PATH}"]) {
                        sh '''
                            echo "Using context:"
                            kubectl config current-context
                            
                            echo "Applying Kubernetes manifests..."
                            kubectl apply -f k8s/

                            echo "Waiting for rollout of deployment/hello..."
                            kubectl rollout status deployment/hello

                            echo "Current pods status:"
                            kubectl get pods -o wide
                            
                            echo "Current services status:"
                            kubectl get svc -o wide
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "CI/CD pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
